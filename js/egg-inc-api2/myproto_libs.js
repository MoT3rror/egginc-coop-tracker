/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
let proto = {};

goog.exportSymbol('proto.Contract');
goog.exportSymbol('proto.ContractProperties');
goog.exportSymbol('proto.ContractProperties.RewardTier');
goog.exportSymbol('proto.CoopStatus');
goog.exportSymbol('proto.CoopStatus.Member');
goog.exportSymbol('proto.CoopStatus.TokenGift');
goog.exportSymbol('proto.CoopStatusRequestPayload');
goog.exportSymbol('proto.EggType');
goog.exportSymbol('proto.EpicResearch');
goog.exportSymbol('proto.Event');
goog.exportSymbol('proto.Farm');
goog.exportSymbol('proto.FirstContact');
goog.exportSymbol('proto.FirstContact.Payload');
goog.exportSymbol('proto.FirstContact.Payload.Contracts');
goog.exportSymbol('proto.FirstContact.Payload.Progress');
goog.exportSymbol('proto.FirstContact.Payload.Progress.Boost');
goog.exportSymbol('proto.FirstContact.Payload.Settings');
goog.exportSymbol('proto.FirstContact.Payload.Stats');
goog.exportSymbol('proto.FirstContactRequestPayload');
goog.exportSymbol('proto.FirstContactRequestPayload.UserInfo');
goog.exportSymbol('proto.GetPeriodicalsRequestPayload');
goog.exportSymbol('proto.Periodicals');
goog.exportSymbol('proto.Periodicals.Contracts');
goog.exportSymbol('proto.Periodicals.Events');
goog.exportSymbol('proto.Periodicals.Sales');
goog.exportSymbol('proto.Research');
goog.exportSymbol('proto.Reward');
goog.exportSymbol('proto.RewardType');
goog.exportSymbol('proto.Sale');
goog.exportSymbol('proto.TrophyType');

/*goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');*/


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FirstContactRequestPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FirstContactRequestPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FirstContactRequestPayload.displayName = 'proto.FirstContactRequestPayload';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FirstContactRequestPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.FirstContactRequestPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FirstContactRequestPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FirstContactRequestPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    apiVersion: jspb.Message.getFieldWithDefault(msg, 2, 0),
    platform: jspb.Message.getFieldWithDefault(msg, 3, 0),
    playerId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    5: jspb.Message.getFieldWithDefault(msg, 5, ""),
    6: jspb.Message.getFieldWithDefault(msg, 6, ""),
    7: jspb.Message.getFieldWithDefault(msg, 7, ""),
    userinfo: (f = msg.getUserinfo()) && proto.FirstContactRequestPayload.UserInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FirstContactRequestPayload}
 */
proto.FirstContactRequestPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FirstContactRequestPayload;
  return proto.FirstContactRequestPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FirstContactRequestPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FirstContactRequestPayload}
 */
proto.FirstContactRequestPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setApiVersion(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPlatform(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.set5(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.set6(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.set7(value);
      break;
    case 8:
      var value = new proto.FirstContactRequestPayload.UserInfo;
      reader.readMessage(value,proto.FirstContactRequestPayload.UserInfo.deserializeBinaryFromReader);
      msg.setUserinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FirstContactRequestPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FirstContactRequestPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FirstContactRequestPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FirstContactRequestPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApiVersion();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPlatform();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getPlayerId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.get5();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.get6();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.get7();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getUserinfo();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.FirstContactRequestPayload.UserInfo.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FirstContactRequestPayload.UserInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FirstContactRequestPayload.UserInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FirstContactRequestPayload.UserInfo.displayName = 'proto.FirstContactRequestPayload.UserInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FirstContactRequestPayload.UserInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.FirstContactRequestPayload.UserInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FirstContactRequestPayload.UserInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FirstContactRequestPayload.UserInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    apiVersion: jspb.Message.getFieldWithDefault(msg, 2, 0),
    clientVersion: jspb.Message.getFieldWithDefault(msg, 3, ""),
    4: jspb.Message.getFieldWithDefault(msg, 4, ""),
    platform: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FirstContactRequestPayload.UserInfo}
 */
proto.FirstContactRequestPayload.UserInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FirstContactRequestPayload.UserInfo;
  return proto.FirstContactRequestPayload.UserInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FirstContactRequestPayload.UserInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FirstContactRequestPayload.UserInfo}
 */
proto.FirstContactRequestPayload.UserInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setApiVersion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientVersion(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.set4(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlatform(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FirstContactRequestPayload.UserInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FirstContactRequestPayload.UserInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FirstContactRequestPayload.UserInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FirstContactRequestPayload.UserInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getApiVersion();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getClientVersion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.get4();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPlatform();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string player_id = 1;
 * @return {string}
 */
proto.FirstContactRequestPayload.UserInfo.prototype.getPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.FirstContactRequestPayload.UserInfo.prototype.setPlayerId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 api_version = 2;
 * @return {number}
 */
proto.FirstContactRequestPayload.UserInfo.prototype.getApiVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.FirstContactRequestPayload.UserInfo.prototype.setApiVersion = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string client_version = 3;
 * @return {string}
 */
proto.FirstContactRequestPayload.UserInfo.prototype.getClientVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.FirstContactRequestPayload.UserInfo.prototype.setClientVersion = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string _4 = 4;
 * @return {string}
 */
proto.FirstContactRequestPayload.UserInfo.prototype.get4 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.FirstContactRequestPayload.UserInfo.prototype.set4 = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string platform = 5;
 * @return {string}
 */
proto.FirstContactRequestPayload.UserInfo.prototype.getPlatform = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.FirstContactRequestPayload.UserInfo.prototype.setPlatform = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 api_version = 2;
 * @return {number}
 */
proto.FirstContactRequestPayload.prototype.getApiVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.FirstContactRequestPayload.prototype.setApiVersion = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 platform = 3;
 * @return {number}
 */
proto.FirstContactRequestPayload.prototype.getPlatform = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.FirstContactRequestPayload.prototype.setPlatform = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string player_id = 4;
 * @return {string}
 */
proto.FirstContactRequestPayload.prototype.getPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.FirstContactRequestPayload.prototype.setPlayerId = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string _5 = 5;
 * @return {string}
 */
proto.FirstContactRequestPayload.prototype.get5 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.FirstContactRequestPayload.prototype.set5 = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string _6 = 6;
 * @return {string}
 */
proto.FirstContactRequestPayload.prototype.get6 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.FirstContactRequestPayload.prototype.set6 = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string _7 = 7;
 * @return {string}
 */
proto.FirstContactRequestPayload.prototype.get7 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.FirstContactRequestPayload.prototype.set7 = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional UserInfo userInfo = 8;
 * @return {?proto.FirstContactRequestPayload.UserInfo}
 */
proto.FirstContactRequestPayload.prototype.getUserinfo = function() {
  return /** @type{?proto.FirstContactRequestPayload.UserInfo} */ (
    jspb.Message.getWrapperField(this, proto.FirstContactRequestPayload.UserInfo, 8));
};


/** @param {?proto.FirstContactRequestPayload.UserInfo|undefined} value */
proto.FirstContactRequestPayload.prototype.setUserinfo = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.FirstContactRequestPayload.prototype.clearUserinfo = function() {
  this.setUserinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.FirstContactRequestPayload.prototype.hasUserinfo = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FirstContact = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FirstContact, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FirstContact.displayName = 'proto.FirstContact';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FirstContact.prototype.toObject = function(opt_includeInstance) {
  return proto.FirstContact.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FirstContact} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FirstContact.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: (f = msg.getData()) && proto.FirstContact.Payload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FirstContact}
 */
proto.FirstContact.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FirstContact;
  return proto.FirstContact.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FirstContact} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FirstContact}
 */
proto.FirstContact.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.FirstContact.Payload;
      reader.readMessage(value,proto.FirstContact.Payload.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FirstContact.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FirstContact.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FirstContact} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FirstContact.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.FirstContact.Payload.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FirstContact.Payload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.FirstContact.Payload.repeatedFields_, null);
};
goog.inherits(proto.FirstContact.Payload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FirstContact.Payload.displayName = 'proto.FirstContact.Payload';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.FirstContact.Payload.repeatedFields_ = [12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FirstContact.Payload.prototype.toObject = function(opt_includeInstance) {
  return proto.FirstContact.Payload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FirstContact.Payload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FirstContact.Payload.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    playerName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    settings: (f = msg.getSettings()) && proto.FirstContact.Payload.Settings.toObject(includeInstance, f),
    stats: (f = msg.getStats()) && proto.FirstContact.Payload.Stats.toObject(includeInstance, f),
    progress: (f = msg.getProgress()) && proto.FirstContact.Payload.Progress.toObject(includeInstance, f),
    farmsList: jspb.Message.toObjectList(msg.getFarmsList(),
    proto.Farm.toObject, includeInstance),
    contracts: (f = msg.getContracts()) && proto.FirstContact.Payload.Contracts.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FirstContact.Payload}
 */
proto.FirstContact.Payload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FirstContact.Payload;
  return proto.FirstContact.Payload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FirstContact.Payload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FirstContact.Payload}
 */
proto.FirstContact.Payload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerName(value);
      break;
    case 4:
      var value = new proto.FirstContact.Payload.Settings;
      reader.readMessage(value,proto.FirstContact.Payload.Settings.deserializeBinaryFromReader);
      msg.setSettings(value);
      break;
    case 6:
      var value = new proto.FirstContact.Payload.Stats;
      reader.readMessage(value,proto.FirstContact.Payload.Stats.deserializeBinaryFromReader);
      msg.setStats(value);
      break;
    case 7:
      var value = new proto.FirstContact.Payload.Progress;
      reader.readMessage(value,proto.FirstContact.Payload.Progress.deserializeBinaryFromReader);
      msg.setProgress(value);
      break;
    case 12:
      var value = new proto.Farm;
      reader.readMessage(value,proto.Farm.deserializeBinaryFromReader);
      msg.addFarms(value);
      break;
    case 13:
      var value = new proto.FirstContact.Payload.Contracts;
      reader.readMessage(value,proto.FirstContact.Payload.Contracts.deserializeBinaryFromReader);
      msg.setContracts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FirstContact.Payload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FirstContact.Payload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FirstContact.Payload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FirstContact.Payload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlayerName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSettings();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.FirstContact.Payload.Settings.serializeBinaryToWriter
    );
  }
  f = message.getStats();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.FirstContact.Payload.Stats.serializeBinaryToWriter
    );
  }
  f = message.getProgress();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.FirstContact.Payload.Progress.serializeBinaryToWriter
    );
  }
  f = message.getFarmsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.Farm.serializeBinaryToWriter
    );
  }
  f = message.getContracts();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.FirstContact.Payload.Contracts.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FirstContact.Payload.Settings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FirstContact.Payload.Settings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FirstContact.Payload.Settings.displayName = 'proto.FirstContact.Payload.Settings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FirstContact.Payload.Settings.prototype.toObject = function(opt_includeInstance) {
  return proto.FirstContact.Payload.Settings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FirstContact.Payload.Settings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FirstContact.Payload.Settings.toObject = function(includeInstance, msg) {
  var f, obj = {
    sfx: jspb.Message.getFieldWithDefault(msg, 1, 0),
    music: jspb.Message.getFieldWithDefault(msg, 2, 0),
    notifications: jspb.Message.getFieldWithDefault(msg, 6, 0),
    lowPerformance: jspb.Message.getFieldWithDefault(msg, 10, 0),
    advertising: jspb.Message.getFieldWithDefault(msg, 14, 0),
    developerAnalytics1: jspb.Message.getFieldWithDefault(msg, 22, 0),
    developerAnalytics2: jspb.Message.getFieldWithDefault(msg, 23, 0),
    backupTimestamp: +jspb.Message.getFieldWithDefault(msg, 24, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FirstContact.Payload.Settings}
 */
proto.FirstContact.Payload.Settings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FirstContact.Payload.Settings;
  return proto.FirstContact.Payload.Settings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FirstContact.Payload.Settings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FirstContact.Payload.Settings}
 */
proto.FirstContact.Payload.Settings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSfx(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMusic(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNotifications(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLowPerformance(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAdvertising(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDeveloperAnalytics1(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDeveloperAnalytics2(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBackupTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FirstContact.Payload.Settings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FirstContact.Payload.Settings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FirstContact.Payload.Settings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FirstContact.Payload.Settings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSfx();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMusic();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getNotifications();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getLowPerformance();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getAdvertising();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getDeveloperAnalytics1();
  if (f !== 0) {
    writer.writeInt32(
      22,
      f
    );
  }
  f = message.getDeveloperAnalytics2();
  if (f !== 0) {
    writer.writeInt32(
      23,
      f
    );
  }
  f = message.getBackupTimestamp();
  if (f !== 0.0) {
    writer.writeDouble(
      24,
      f
    );
  }
};


/**
 * optional int32 sfx = 1;
 * @return {number}
 */
proto.FirstContact.Payload.Settings.prototype.getSfx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.FirstContact.Payload.Settings.prototype.setSfx = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 music = 2;
 * @return {number}
 */
proto.FirstContact.Payload.Settings.prototype.getMusic = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.FirstContact.Payload.Settings.prototype.setMusic = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 notifications = 6;
 * @return {number}
 */
proto.FirstContact.Payload.Settings.prototype.getNotifications = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.FirstContact.Payload.Settings.prototype.setNotifications = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 low_performance = 10;
 * @return {number}
 */
proto.FirstContact.Payload.Settings.prototype.getLowPerformance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.FirstContact.Payload.Settings.prototype.setLowPerformance = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 advertising = 14;
 * @return {number}
 */
proto.FirstContact.Payload.Settings.prototype.getAdvertising = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.FirstContact.Payload.Settings.prototype.setAdvertising = function(value) {
  jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int32 developer_analytics_1 = 22;
 * @return {number}
 */
proto.FirstContact.Payload.Settings.prototype.getDeveloperAnalytics1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/** @param {number} value */
proto.FirstContact.Payload.Settings.prototype.setDeveloperAnalytics1 = function(value) {
  jspb.Message.setProto3IntField(this, 22, value);
};


/**
 * optional int32 developer_analytics_2 = 23;
 * @return {number}
 */
proto.FirstContact.Payload.Settings.prototype.getDeveloperAnalytics2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/** @param {number} value */
proto.FirstContact.Payload.Settings.prototype.setDeveloperAnalytics2 = function(value) {
  jspb.Message.setProto3IntField(this, 23, value);
};


/**
 * optional double backup_timestamp = 24;
 * @return {number}
 */
proto.FirstContact.Payload.Settings.prototype.getBackupTimestamp = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 24, 0.0));
};


/** @param {number} value */
proto.FirstContact.Payload.Settings.prototype.setBackupTimestamp = function(value) {
  jspb.Message.setProto3FloatField(this, 24, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FirstContact.Payload.Stats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.FirstContact.Payload.Stats.repeatedFields_, null);
};
goog.inherits(proto.FirstContact.Payload.Stats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FirstContact.Payload.Stats.displayName = 'proto.FirstContact.Payload.Stats';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.FirstContact.Payload.Stats.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FirstContact.Payload.Stats.prototype.toObject = function(opt_includeInstance) {
  return proto.FirstContact.Payload.Stats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FirstContact.Payload.Stats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FirstContact.Payload.Stats.toObject = function(includeInstance, msg) {
  var f, obj = {
    droneTakedowns: jspb.Message.getFieldWithDefault(msg, 6, 0),
    farmEggsLaidList: jspb.Message.getRepeatedFloatingPointField(msg, 8),
    prestiges: jspb.Message.getFieldWithDefault(msg, 9, 0),
    eliteDroneTakedowns: jspb.Message.getFieldWithDefault(msg, 10, 0),
    piggyLevel: jspb.Message.getFieldWithDefault(msg, 11, 0),
    boostsUsed: jspb.Message.getFieldWithDefault(msg, 13, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FirstContact.Payload.Stats}
 */
proto.FirstContact.Payload.Stats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FirstContact.Payload.Stats;
  return proto.FirstContact.Payload.Stats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FirstContact.Payload.Stats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FirstContact.Payload.Stats}
 */
proto.FirstContact.Payload.Stats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDroneTakedowns(value);
      break;
    case 8:
      var value = /** @type {!Array<number>} */ (reader.readPackedDouble());
      msg.setFarmEggsLaidList(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPrestiges(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEliteDroneTakedowns(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPiggyLevel(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBoostsUsed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FirstContact.Payload.Stats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FirstContact.Payload.Stats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FirstContact.Payload.Stats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FirstContact.Payload.Stats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDroneTakedowns();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getFarmEggsLaidList();
  if (f.length > 0) {
    writer.writePackedDouble(
      8,
      f
    );
  }
  f = message.getPrestiges();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getEliteDroneTakedowns();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getPiggyLevel();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getBoostsUsed();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
};


/**
 * optional int32 drone_takedowns = 6;
 * @return {number}
 */
proto.FirstContact.Payload.Stats.prototype.getDroneTakedowns = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.FirstContact.Payload.Stats.prototype.setDroneTakedowns = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * repeated double farm_eggs_laid = 8;
 * @return {!Array<number>}
 */
proto.FirstContact.Payload.Stats.prototype.getFarmEggsLaidList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 8));
};


/** @param {!Array<number>} value */
proto.FirstContact.Payload.Stats.prototype.setFarmEggsLaidList = function(value) {
  jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.FirstContact.Payload.Stats.prototype.addFarmEggsLaid = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


proto.FirstContact.Payload.Stats.prototype.clearFarmEggsLaidList = function() {
  this.setFarmEggsLaidList([]);
};


/**
 * optional int32 prestiges = 9;
 * @return {number}
 */
proto.FirstContact.Payload.Stats.prototype.getPrestiges = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.FirstContact.Payload.Stats.prototype.setPrestiges = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 elite_drone_takedowns = 10;
 * @return {number}
 */
proto.FirstContact.Payload.Stats.prototype.getEliteDroneTakedowns = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.FirstContact.Payload.Stats.prototype.setEliteDroneTakedowns = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 piggy_level = 11;
 * @return {number}
 */
proto.FirstContact.Payload.Stats.prototype.getPiggyLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.FirstContact.Payload.Stats.prototype.setPiggyLevel = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 boosts_used = 13;
 * @return {number}
 */
proto.FirstContact.Payload.Stats.prototype.getBoostsUsed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.FirstContact.Payload.Stats.prototype.setBoostsUsed = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FirstContact.Payload.Progress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.FirstContact.Payload.Progress.repeatedFields_, null);
};
goog.inherits(proto.FirstContact.Payload.Progress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FirstContact.Payload.Progress.displayName = 'proto.FirstContact.Payload.Progress';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.FirstContact.Payload.Progress.repeatedFields_ = [9,18,19,30];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FirstContact.Payload.Progress.prototype.toObject = function(opt_includeInstance) {
  return proto.FirstContact.Payload.Progress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FirstContact.Payload.Progress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FirstContact.Payload.Progress.toObject = function(includeInstance, msg) {
  var f, obj = {
    lifefimeGoldenEggs: jspb.Message.getFieldWithDefault(msg, 2, 0),
    lifetimeGoldenEggsSpent: jspb.Message.getFieldWithDefault(msg, 3, 0),
    prestigeEarnings: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    lifetimeEarnings: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    piggyBank: jspb.Message.getFieldWithDefault(msg, 7, 0),
    epicResearchesList: jspb.Message.toObjectList(msg.getEpicResearchesList(),
    proto.EpicResearch.toObject, includeInstance),
    maxFarmPopulationsReachedList: jspb.Message.getRepeatedField(msg, 18),
    farmTrophyLevelList: jspb.Message.getRepeatedField(msg, 19),
    prophecyEggs: jspb.Message.getFieldWithDefault(msg, 23, 0),
    numDailyGiftsCollected: jspb.Message.getFieldWithDefault(msg, 28, 0),
    boostsList: jspb.Message.toObjectList(msg.getBoostsList(),
    proto.FirstContact.Payload.Progress.Boost.toObject, includeInstance),
    soulEggs: +jspb.Message.getFieldWithDefault(msg, 34, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FirstContact.Payload.Progress}
 */
proto.FirstContact.Payload.Progress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FirstContact.Payload.Progress;
  return proto.FirstContact.Payload.Progress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FirstContact.Payload.Progress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FirstContact.Payload.Progress}
 */
proto.FirstContact.Payload.Progress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLifefimeGoldenEggs(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLifetimeGoldenEggsSpent(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrestigeEarnings(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLifetimeEarnings(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPiggyBank(value);
      break;
    case 9:
      var value = new proto.EpicResearch;
      reader.readMessage(value,proto.EpicResearch.deserializeBinaryFromReader);
      msg.addEpicResearches(value);
      break;
    case 18:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setMaxFarmPopulationsReachedList(value);
      break;
    case 19:
      var value = /** @type {!Array<!proto.TrophyType>} */ (reader.readPackedEnum());
      msg.setFarmTrophyLevelList(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProphecyEggs(value);
      break;
    case 28:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumDailyGiftsCollected(value);
      break;
    case 30:
      var value = new proto.FirstContact.Payload.Progress.Boost;
      reader.readMessage(value,proto.FirstContact.Payload.Progress.Boost.deserializeBinaryFromReader);
      msg.addBoosts(value);
      break;
    case 34:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSoulEggs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FirstContact.Payload.Progress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FirstContact.Payload.Progress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FirstContact.Payload.Progress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FirstContact.Payload.Progress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLifefimeGoldenEggs();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getLifetimeGoldenEggsSpent();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getPrestigeEarnings();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getLifetimeEarnings();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getPiggyBank();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getEpicResearchesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.EpicResearch.serializeBinaryToWriter
    );
  }
  f = message.getMaxFarmPopulationsReachedList();
  if (f.length > 0) {
    writer.writePackedInt64(
      18,
      f
    );
  }
  f = message.getFarmTrophyLevelList();
  if (f.length > 0) {
    writer.writePackedEnum(
      19,
      f
    );
  }
  f = message.getProphecyEggs();
  if (f !== 0) {
    writer.writeInt32(
      23,
      f
    );
  }
  f = message.getNumDailyGiftsCollected();
  if (f !== 0) {
    writer.writeInt32(
      28,
      f
    );
  }
  f = message.getBoostsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      30,
      f,
      proto.FirstContact.Payload.Progress.Boost.serializeBinaryToWriter
    );
  }
  f = message.getSoulEggs();
  if (f !== 0.0) {
    writer.writeDouble(
      34,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FirstContact.Payload.Progress.Boost = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.FirstContact.Payload.Progress.Boost, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FirstContact.Payload.Progress.Boost.displayName = 'proto.FirstContact.Payload.Progress.Boost';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FirstContact.Payload.Progress.Boost.prototype.toObject = function(opt_includeInstance) {
  return proto.FirstContact.Payload.Progress.Boost.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FirstContact.Payload.Progress.Boost} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FirstContact.Payload.Progress.Boost.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    count: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FirstContact.Payload.Progress.Boost}
 */
proto.FirstContact.Payload.Progress.Boost.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FirstContact.Payload.Progress.Boost;
  return proto.FirstContact.Payload.Progress.Boost.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FirstContact.Payload.Progress.Boost} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FirstContact.Payload.Progress.Boost}
 */
proto.FirstContact.Payload.Progress.Boost.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FirstContact.Payload.Progress.Boost.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FirstContact.Payload.Progress.Boost.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FirstContact.Payload.Progress.Boost} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FirstContact.Payload.Progress.Boost.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.FirstContact.Payload.Progress.Boost.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.FirstContact.Payload.Progress.Boost.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 count = 2;
 * @return {number}
 */
proto.FirstContact.Payload.Progress.Boost.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.FirstContact.Payload.Progress.Boost.prototype.setCount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 lifefime_golden_eggs = 2;
 * @return {number}
 */
proto.FirstContact.Payload.Progress.prototype.getLifefimeGoldenEggs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.FirstContact.Payload.Progress.prototype.setLifefimeGoldenEggs = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 lifetime_golden_eggs_spent = 3;
 * @return {number}
 */
proto.FirstContact.Payload.Progress.prototype.getLifetimeGoldenEggsSpent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.FirstContact.Payload.Progress.prototype.setLifetimeGoldenEggsSpent = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional double prestige_earnings = 5;
 * @return {number}
 */
proto.FirstContact.Payload.Progress.prototype.getPrestigeEarnings = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.FirstContact.Payload.Progress.prototype.setPrestigeEarnings = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double lifetime_earnings = 6;
 * @return {number}
 */
proto.FirstContact.Payload.Progress.prototype.getLifetimeEarnings = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.FirstContact.Payload.Progress.prototype.setLifetimeEarnings = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional int32 piggy_bank = 7;
 * @return {number}
 */
proto.FirstContact.Payload.Progress.prototype.getPiggyBank = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.FirstContact.Payload.Progress.prototype.setPiggyBank = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * repeated EpicResearch epic_researches = 9;
 * @return {!Array<!proto.EpicResearch>}
 */
proto.FirstContact.Payload.Progress.prototype.getEpicResearchesList = function() {
  return /** @type{!Array<!proto.EpicResearch>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.EpicResearch, 9));
};


/** @param {!Array<!proto.EpicResearch>} value */
proto.FirstContact.Payload.Progress.prototype.setEpicResearchesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.EpicResearch=} opt_value
 * @param {number=} opt_index
 * @return {!proto.EpicResearch}
 */
proto.FirstContact.Payload.Progress.prototype.addEpicResearches = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.EpicResearch, opt_index);
};


proto.FirstContact.Payload.Progress.prototype.clearEpicResearchesList = function() {
  this.setEpicResearchesList([]);
};


/**
 * repeated int64 max_farm_populations_reached = 18;
 * @return {!Array<number>}
 */
proto.FirstContact.Payload.Progress.prototype.getMaxFarmPopulationsReachedList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 18));
};


/** @param {!Array<number>} value */
proto.FirstContact.Payload.Progress.prototype.setMaxFarmPopulationsReachedList = function(value) {
  jspb.Message.setField(this, 18, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.FirstContact.Payload.Progress.prototype.addMaxFarmPopulationsReached = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 18, value, opt_index);
};


proto.FirstContact.Payload.Progress.prototype.clearMaxFarmPopulationsReachedList = function() {
  this.setMaxFarmPopulationsReachedList([]);
};


/**
 * repeated TrophyType farm_trophy_level = 19;
 * @return {!Array<!proto.TrophyType>}
 */
proto.FirstContact.Payload.Progress.prototype.getFarmTrophyLevelList = function() {
  return /** @type {!Array<!proto.TrophyType>} */ (jspb.Message.getRepeatedField(this, 19));
};


/** @param {!Array<!proto.TrophyType>} value */
proto.FirstContact.Payload.Progress.prototype.setFarmTrophyLevelList = function(value) {
  jspb.Message.setField(this, 19, value || []);
};


/**
 * @param {!proto.TrophyType} value
 * @param {number=} opt_index
 */
proto.FirstContact.Payload.Progress.prototype.addFarmTrophyLevel = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 19, value, opt_index);
};


proto.FirstContact.Payload.Progress.prototype.clearFarmTrophyLevelList = function() {
  this.setFarmTrophyLevelList([]);
};


/**
 * optional int32 prophecy_eggs = 23;
 * @return {number}
 */
proto.FirstContact.Payload.Progress.prototype.getProphecyEggs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/** @param {number} value */
proto.FirstContact.Payload.Progress.prototype.setProphecyEggs = function(value) {
  jspb.Message.setProto3IntField(this, 23, value);
};


/**
 * optional int32 num_daily_gifts_collected = 28;
 * @return {number}
 */
proto.FirstContact.Payload.Progress.prototype.getNumDailyGiftsCollected = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 28, 0));
};


/** @param {number} value */
proto.FirstContact.Payload.Progress.prototype.setNumDailyGiftsCollected = function(value) {
  jspb.Message.setProto3IntField(this, 28, value);
};


/**
 * repeated Boost boosts = 30;
 * @return {!Array<!proto.FirstContact.Payload.Progress.Boost>}
 */
proto.FirstContact.Payload.Progress.prototype.getBoostsList = function() {
  return /** @type{!Array<!proto.FirstContact.Payload.Progress.Boost>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.FirstContact.Payload.Progress.Boost, 30));
};


/** @param {!Array<!proto.FirstContact.Payload.Progress.Boost>} value */
proto.FirstContact.Payload.Progress.prototype.setBoostsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 30, value);
};


/**
 * @param {!proto.FirstContact.Payload.Progress.Boost=} opt_value
 * @param {number=} opt_index
 * @return {!proto.FirstContact.Payload.Progress.Boost}
 */
proto.FirstContact.Payload.Progress.prototype.addBoosts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 30, opt_value, proto.FirstContact.Payload.Progress.Boost, opt_index);
};


proto.FirstContact.Payload.Progress.prototype.clearBoostsList = function() {
  this.setBoostsList([]);
};


/**
 * optional double soul_eggs = 34;
 * @return {number}
 */
proto.FirstContact.Payload.Progress.prototype.getSoulEggs = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 34, 0.0));
};


/** @param {number} value */
proto.FirstContact.Payload.Progress.prototype.setSoulEggs = function(value) {
  jspb.Message.setProto3FloatField(this, 34, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FirstContact.Payload.Contracts = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.FirstContact.Payload.Contracts.repeatedFields_, null);
};
goog.inherits(proto.FirstContact.Payload.Contracts, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FirstContact.Payload.Contracts.displayName = 'proto.FirstContact.Payload.Contracts';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.FirstContact.Payload.Contracts.repeatedFields_ = [1,2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FirstContact.Payload.Contracts.prototype.toObject = function(opt_includeInstance) {
  return proto.FirstContact.Payload.Contracts.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FirstContact.Payload.Contracts} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FirstContact.Payload.Contracts.toObject = function(includeInstance, msg) {
  var f, obj = {
    activeContractsList: jspb.Message.toObjectList(msg.getActiveContractsList(),
    proto.Contract.toObject, includeInstance),
    pastContractsList: jspb.Message.toObjectList(msg.getPastContractsList(),
    proto.Contract.toObject, includeInstance),
    contractIdsList: jspb.Message.getRepeatedField(msg, 3),
    activeCoopStatusesList: jspb.Message.toObjectList(msg.getActiveCoopStatusesList(),
    proto.CoopStatus.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FirstContact.Payload.Contracts}
 */
proto.FirstContact.Payload.Contracts.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FirstContact.Payload.Contracts;
  return proto.FirstContact.Payload.Contracts.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FirstContact.Payload.Contracts} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FirstContact.Payload.Contracts}
 */
proto.FirstContact.Payload.Contracts.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Contract;
      reader.readMessage(value,proto.Contract.deserializeBinaryFromReader);
      msg.addActiveContracts(value);
      break;
    case 2:
      var value = new proto.Contract;
      reader.readMessage(value,proto.Contract.deserializeBinaryFromReader);
      msg.addPastContracts(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addContractIds(value);
      break;
    case 4:
      var value = new proto.CoopStatus;
      reader.readMessage(value,proto.CoopStatus.deserializeBinaryFromReader);
      msg.addActiveCoopStatuses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FirstContact.Payload.Contracts.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FirstContact.Payload.Contracts.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FirstContact.Payload.Contracts} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FirstContact.Payload.Contracts.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActiveContractsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Contract.serializeBinaryToWriter
    );
  }
  f = message.getPastContractsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Contract.serializeBinaryToWriter
    );
  }
  f = message.getContractIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getActiveCoopStatusesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.CoopStatus.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Contract active_contracts = 1;
 * @return {!Array<!proto.Contract>}
 */
proto.FirstContact.Payload.Contracts.prototype.getActiveContractsList = function() {
  return /** @type{!Array<!proto.Contract>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Contract, 1));
};


/** @param {!Array<!proto.Contract>} value */
proto.FirstContact.Payload.Contracts.prototype.setActiveContractsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Contract=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Contract}
 */
proto.FirstContact.Payload.Contracts.prototype.addActiveContracts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Contract, opt_index);
};


proto.FirstContact.Payload.Contracts.prototype.clearActiveContractsList = function() {
  this.setActiveContractsList([]);
};


/**
 * repeated Contract past_contracts = 2;
 * @return {!Array<!proto.Contract>}
 */
proto.FirstContact.Payload.Contracts.prototype.getPastContractsList = function() {
  return /** @type{!Array<!proto.Contract>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Contract, 2));
};


/** @param {!Array<!proto.Contract>} value */
proto.FirstContact.Payload.Contracts.prototype.setPastContractsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Contract=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Contract}
 */
proto.FirstContact.Payload.Contracts.prototype.addPastContracts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Contract, opt_index);
};


proto.FirstContact.Payload.Contracts.prototype.clearPastContractsList = function() {
  this.setPastContractsList([]);
};


/**
 * repeated string contract_ids = 3;
 * @return {!Array<string>}
 */
proto.FirstContact.Payload.Contracts.prototype.getContractIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.FirstContact.Payload.Contracts.prototype.setContractIdsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.FirstContact.Payload.Contracts.prototype.addContractIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.FirstContact.Payload.Contracts.prototype.clearContractIdsList = function() {
  this.setContractIdsList([]);
};


/**
 * repeated CoopStatus active_coop_statuses = 4;
 * @return {!Array<!proto.CoopStatus>}
 */
proto.FirstContact.Payload.Contracts.prototype.getActiveCoopStatusesList = function() {
  return /** @type{!Array<!proto.CoopStatus>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.CoopStatus, 4));
};


/** @param {!Array<!proto.CoopStatus>} value */
proto.FirstContact.Payload.Contracts.prototype.setActiveCoopStatusesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.CoopStatus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.CoopStatus}
 */
proto.FirstContact.Payload.Contracts.prototype.addActiveCoopStatuses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.CoopStatus, opt_index);
};


proto.FirstContact.Payload.Contracts.prototype.clearActiveCoopStatusesList = function() {
  this.setActiveCoopStatusesList([]);
};


/**
 * optional string player_id = 1;
 * @return {string}
 */
proto.FirstContact.Payload.prototype.getPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.FirstContact.Payload.prototype.setPlayerId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string player_name = 2;
 * @return {string}
 */
proto.FirstContact.Payload.prototype.getPlayerName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.FirstContact.Payload.prototype.setPlayerName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Settings settings = 4;
 * @return {?proto.FirstContact.Payload.Settings}
 */
proto.FirstContact.Payload.prototype.getSettings = function() {
  return /** @type{?proto.FirstContact.Payload.Settings} */ (
    jspb.Message.getWrapperField(this, proto.FirstContact.Payload.Settings, 4));
};


/** @param {?proto.FirstContact.Payload.Settings|undefined} value */
proto.FirstContact.Payload.prototype.setSettings = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.FirstContact.Payload.prototype.clearSettings = function() {
  this.setSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.FirstContact.Payload.prototype.hasSettings = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Stats stats = 6;
 * @return {?proto.FirstContact.Payload.Stats}
 */
proto.FirstContact.Payload.prototype.getStats = function() {
  return /** @type{?proto.FirstContact.Payload.Stats} */ (
    jspb.Message.getWrapperField(this, proto.FirstContact.Payload.Stats, 6));
};


/** @param {?proto.FirstContact.Payload.Stats|undefined} value */
proto.FirstContact.Payload.prototype.setStats = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.FirstContact.Payload.prototype.clearStats = function() {
  this.setStats(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.FirstContact.Payload.prototype.hasStats = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Progress progress = 7;
 * @return {?proto.FirstContact.Payload.Progress}
 */
proto.FirstContact.Payload.prototype.getProgress = function() {
  return /** @type{?proto.FirstContact.Payload.Progress} */ (
    jspb.Message.getWrapperField(this, proto.FirstContact.Payload.Progress, 7));
};


/** @param {?proto.FirstContact.Payload.Progress|undefined} value */
proto.FirstContact.Payload.prototype.setProgress = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.FirstContact.Payload.prototype.clearProgress = function() {
  this.setProgress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.FirstContact.Payload.prototype.hasProgress = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated Farm farms = 12;
 * @return {!Array<!proto.Farm>}
 */
proto.FirstContact.Payload.prototype.getFarmsList = function() {
  return /** @type{!Array<!proto.Farm>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Farm, 12));
};


/** @param {!Array<!proto.Farm>} value */
proto.FirstContact.Payload.prototype.setFarmsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.Farm=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Farm}
 */
proto.FirstContact.Payload.prototype.addFarms = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.Farm, opt_index);
};


proto.FirstContact.Payload.prototype.clearFarmsList = function() {
  this.setFarmsList([]);
};


/**
 * optional Contracts contracts = 13;
 * @return {?proto.FirstContact.Payload.Contracts}
 */
proto.FirstContact.Payload.prototype.getContracts = function() {
  return /** @type{?proto.FirstContact.Payload.Contracts} */ (
    jspb.Message.getWrapperField(this, proto.FirstContact.Payload.Contracts, 13));
};


/** @param {?proto.FirstContact.Payload.Contracts|undefined} value */
proto.FirstContact.Payload.prototype.setContracts = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.FirstContact.Payload.prototype.clearContracts = function() {
  this.setContracts(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.FirstContact.Payload.prototype.hasContracts = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional Payload data = 1;
 * @return {?proto.FirstContact.Payload}
 */
proto.FirstContact.prototype.getData = function() {
  return /** @type{?proto.FirstContact.Payload} */ (
    jspb.Message.getWrapperField(this, proto.FirstContact.Payload, 1));
};


/** @param {?proto.FirstContact.Payload|undefined} value */
proto.FirstContact.prototype.setData = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.FirstContact.prototype.clearData = function() {
  this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.FirstContact.prototype.hasData = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Farm = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Farm.repeatedFields_, null);
};
goog.inherits(proto.Farm, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Farm.displayName = 'proto.Farm';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Farm.repeatedFields_ = [12,13,17,21,18];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Farm.prototype.toObject = function(opt_includeInstance) {
  return proto.Farm.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Farm} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Farm.toObject = function(includeInstance, msg) {
  var f, obj = {
    eggType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    prestigeEarnings: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    3: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    lastSaved: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    chickenCount: jspb.Message.getFieldWithDefault(msg, 6, 0),
    eggsLaid: +jspb.Message.getFieldWithDefault(msg, 9, 0.0),
    eggsPaidFor: +jspb.Message.getFieldWithDefault(msg, 10, 0.0),
    silosOwned: jspb.Message.getFieldWithDefault(msg, 11, 0),
    habitatTypesList: jspb.Message.getRepeatedField(msg, 12),
    habitatPopulationsList: jspb.Message.getRepeatedField(msg, 13),
    vehicleTypesList: jspb.Message.getRepeatedField(msg, 17),
    trainLengthsList: jspb.Message.getRepeatedField(msg, 21),
    researchesList: jspb.Message.toObjectList(msg.getResearchesList(),
    proto.Research.toObject, includeInstance),
    contractId: jspb.Message.getFieldWithDefault(msg, 20, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Farm}
 */
proto.Farm.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Farm;
  return proto.Farm.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Farm} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Farm}
 */
proto.Farm.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.EggType} */ (reader.readEnum());
      msg.setEggType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPrestigeEarnings(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.set3(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLastSaved(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setChickenCount(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEggsLaid(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEggsPaidFor(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSilosOwned(value);
      break;
    case 12:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setHabitatTypesList(value);
      break;
    case 13:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setHabitatPopulationsList(value);
      break;
    case 17:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setVehicleTypesList(value);
      break;
    case 21:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setTrainLengthsList(value);
      break;
    case 18:
      var value = new proto.Research;
      reader.readMessage(value,proto.Research.deserializeBinaryFromReader);
      msg.addResearches(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Farm.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Farm.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Farm} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Farm.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEggType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPrestigeEarnings();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.get3();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getLastSaved();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getChickenCount();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getEggsLaid();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getEggsPaidFor();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = message.getSilosOwned();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getHabitatTypesList();
  if (f.length > 0) {
    writer.writePackedInt32(
      12,
      f
    );
  }
  f = message.getHabitatPopulationsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      13,
      f
    );
  }
  f = message.getVehicleTypesList();
  if (f.length > 0) {
    writer.writePackedInt32(
      17,
      f
    );
  }
  f = message.getTrainLengthsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      21,
      f
    );
  }
  f = message.getResearchesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      18,
      f,
      proto.Research.serializeBinaryToWriter
    );
  }
  f = message.getContractId();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
};


/**
 * optional EggType egg_type = 1;
 * @return {!proto.EggType}
 */
proto.Farm.prototype.getEggType = function() {
  return /** @type {!proto.EggType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.EggType} value */
proto.Farm.prototype.setEggType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional double prestige_earnings = 2;
 * @return {number}
 */
proto.Farm.prototype.getPrestigeEarnings = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.Farm.prototype.setPrestigeEarnings = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double _3 = 3;
 * @return {number}
 */
proto.Farm.prototype.get3 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.Farm.prototype.set3 = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double last_saved = 5;
 * @return {number}
 */
proto.Farm.prototype.getLastSaved = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.Farm.prototype.setLastSaved = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional int64 chicken_count = 6;
 * @return {number}
 */
proto.Farm.prototype.getChickenCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.Farm.prototype.setChickenCount = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional double eggs_laid = 9;
 * @return {number}
 */
proto.Farm.prototype.getEggsLaid = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.Farm.prototype.setEggsLaid = function(value) {
  jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional double eggs_paid_for = 10;
 * @return {number}
 */
proto.Farm.prototype.getEggsPaidFor = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 10, 0.0));
};


/** @param {number} value */
proto.Farm.prototype.setEggsPaidFor = function(value) {
  jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional int32 silos_owned = 11;
 * @return {number}
 */
proto.Farm.prototype.getSilosOwned = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.Farm.prototype.setSilosOwned = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * repeated int32 habitat_types = 12;
 * @return {!Array<number>}
 */
proto.Farm.prototype.getHabitatTypesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 12));
};


/** @param {!Array<number>} value */
proto.Farm.prototype.setHabitatTypesList = function(value) {
  jspb.Message.setField(this, 12, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.Farm.prototype.addHabitatTypes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 12, value, opt_index);
};


proto.Farm.prototype.clearHabitatTypesList = function() {
  this.setHabitatTypesList([]);
};


/**
 * repeated int64 habitat_populations = 13;
 * @return {!Array<number>}
 */
proto.Farm.prototype.getHabitatPopulationsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 13));
};


/** @param {!Array<number>} value */
proto.Farm.prototype.setHabitatPopulationsList = function(value) {
  jspb.Message.setField(this, 13, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.Farm.prototype.addHabitatPopulations = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 13, value, opt_index);
};


proto.Farm.prototype.clearHabitatPopulationsList = function() {
  this.setHabitatPopulationsList([]);
};


/**
 * repeated int32 vehicle_types = 17;
 * @return {!Array<number>}
 */
proto.Farm.prototype.getVehicleTypesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 17));
};


/** @param {!Array<number>} value */
proto.Farm.prototype.setVehicleTypesList = function(value) {
  jspb.Message.setField(this, 17, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.Farm.prototype.addVehicleTypes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 17, value, opt_index);
};


proto.Farm.prototype.clearVehicleTypesList = function() {
  this.setVehicleTypesList([]);
};


/**
 * repeated int32 train_lengths = 21;
 * @return {!Array<number>}
 */
proto.Farm.prototype.getTrainLengthsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 21));
};


/** @param {!Array<number>} value */
proto.Farm.prototype.setTrainLengthsList = function(value) {
  jspb.Message.setField(this, 21, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.Farm.prototype.addTrainLengths = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 21, value, opt_index);
};


proto.Farm.prototype.clearTrainLengthsList = function() {
  this.setTrainLengthsList([]);
};


/**
 * repeated Research researches = 18;
 * @return {!Array<!proto.Research>}
 */
proto.Farm.prototype.getResearchesList = function() {
  return /** @type{!Array<!proto.Research>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Research, 18));
};


/** @param {!Array<!proto.Research>} value */
proto.Farm.prototype.setResearchesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 18, value);
};


/**
 * @param {!proto.Research=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Research}
 */
proto.Farm.prototype.addResearches = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 18, opt_value, proto.Research, opt_index);
};


proto.Farm.prototype.clearResearchesList = function() {
  this.setResearchesList([]);
};


/**
 * optional string contract_id = 20;
 * @return {string}
 */
proto.Farm.prototype.getContractId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/** @param {string} value */
proto.Farm.prototype.setContractId = function(value) {
  jspb.Message.setProto3StringField(this, 20, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Research = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Research, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Research.displayName = 'proto.Research';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Research.prototype.toObject = function(opt_includeInstance) {
  return proto.Research.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Research} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Research.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    level: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Research}
 */
proto.Research.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Research;
  return proto.Research.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Research} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Research}
 */
proto.Research.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLevel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Research.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Research.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Research} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Research.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.Research.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Research.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 level = 2;
 * @return {number}
 */
proto.Research.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Research.prototype.setLevel = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EpicResearch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EpicResearch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.EpicResearch.displayName = 'proto.EpicResearch';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EpicResearch.prototype.toObject = function(opt_includeInstance) {
  return proto.EpicResearch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EpicResearch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EpicResearch.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    level: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EpicResearch}
 */
proto.EpicResearch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EpicResearch;
  return proto.EpicResearch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EpicResearch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EpicResearch}
 */
proto.EpicResearch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLevel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EpicResearch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EpicResearch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EpicResearch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EpicResearch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLevel();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.EpicResearch.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.EpicResearch.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 level = 2;
 * @return {number}
 */
proto.EpicResearch.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.EpicResearch.prototype.setLevel = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Contract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Contract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Contract.displayName = 'proto.Contract';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Contract.prototype.toObject = function(opt_includeInstance) {
  return proto.Contract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Contract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Contract.toObject = function(includeInstance, msg) {
  var f, obj = {
    props: (f = msg.getProps()) && proto.ContractProperties.toObject(includeInstance, f),
    code: jspb.Message.getFieldWithDefault(msg, 2, ""),
    started: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    4: jspb.Message.getFieldWithDefault(msg, 4, 0),
    productionDeadline: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    completedGoal: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    7: jspb.Message.getFieldWithDefault(msg, 7, 0),
    collectionDeadline: +jspb.Message.getFieldWithDefault(msg, 9, 0.0),
    10: jspb.Message.getFieldWithDefault(msg, 10, 0),
    playerContribution: +jspb.Message.getFieldWithDefault(msg, 11, 0.0),
    playerId: jspb.Message.getFieldWithDefault(msg, 13, ""),
    numGoalsCompleted: jspb.Message.getFieldWithDefault(msg, 14, 0),
    15: jspb.Message.getFieldWithDefault(msg, 15, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Contract}
 */
proto.Contract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Contract;
  return proto.Contract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Contract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Contract}
 */
proto.Contract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ContractProperties;
      reader.readMessage(value,proto.ContractProperties.deserializeBinaryFromReader);
      msg.setProps(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStarted(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.set4(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setProductionDeadline(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCompletedGoal(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.set7(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCollectionDeadline(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.set10(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPlayerContribution(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerId(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumGoalsCompleted(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.set15(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Contract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Contract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Contract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Contract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProps();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ContractProperties.serializeBinaryToWriter
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStarted();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.get4();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getProductionDeadline();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getCompletedGoal();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.get7();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getCollectionDeadline();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.get10();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getPlayerContribution();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getPlayerId();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getNumGoalsCompleted();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.get15();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
};


/**
 * optional ContractProperties props = 1;
 * @return {?proto.ContractProperties}
 */
proto.Contract.prototype.getProps = function() {
  return /** @type{?proto.ContractProperties} */ (
    jspb.Message.getWrapperField(this, proto.ContractProperties, 1));
};


/** @param {?proto.ContractProperties|undefined} value */
proto.Contract.prototype.setProps = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.Contract.prototype.clearProps = function() {
  this.setProps(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Contract.prototype.hasProps = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string code = 2;
 * @return {string}
 */
proto.Contract.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Contract.prototype.setCode = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional double started = 3;
 * @return {number}
 */
proto.Contract.prototype.getStarted = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.Contract.prototype.setStarted = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional int32 _4 = 4;
 * @return {number}
 */
proto.Contract.prototype.get4 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.Contract.prototype.set4 = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional double production_deadline = 5;
 * @return {number}
 */
proto.Contract.prototype.getProductionDeadline = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.Contract.prototype.setProductionDeadline = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double completed_goal = 6;
 * @return {number}
 */
proto.Contract.prototype.getCompletedGoal = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.Contract.prototype.setCompletedGoal = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional int32 _7 = 7;
 * @return {number}
 */
proto.Contract.prototype.get7 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.Contract.prototype.set7 = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional double collection_deadline = 9;
 * @return {number}
 */
proto.Contract.prototype.getCollectionDeadline = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.Contract.prototype.setCollectionDeadline = function(value) {
  jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional int32 _10 = 10;
 * @return {number}
 */
proto.Contract.prototype.get10 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.Contract.prototype.set10 = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional double player_contribution = 11;
 * @return {number}
 */
proto.Contract.prototype.getPlayerContribution = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 11, 0.0));
};


/** @param {number} value */
proto.Contract.prototype.setPlayerContribution = function(value) {
  jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional string player_id = 13;
 * @return {string}
 */
proto.Contract.prototype.getPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.Contract.prototype.setPlayerId = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional int32 num_goals_completed = 14;
 * @return {number}
 */
proto.Contract.prototype.getNumGoalsCompleted = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.Contract.prototype.setNumGoalsCompleted = function(value) {
  jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int32 _15 = 15;
 * @return {number}
 */
proto.Contract.prototype.get15 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.Contract.prototype.set15 = function(value) {
  jspb.Message.setProto3IntField(this, 15, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ContractProperties = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ContractProperties.repeatedFields_, null);
};
goog.inherits(proto.ContractProperties, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ContractProperties.displayName = 'proto.ContractProperties';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ContractProperties.repeatedFields_ = [3,16];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ContractProperties.prototype.toObject = function(opt_includeInstance) {
  return proto.ContractProperties.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ContractProperties} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ContractProperties.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    eggType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    rewardsList: jspb.Message.toObjectList(msg.getRewardsList(),
    proto.Reward.toObject, includeInstance),
    coopAllowed: jspb.Message.getFieldWithDefault(msg, 4, false),
    maxCoopSize: jspb.Message.getFieldWithDefault(msg, 5, 0),
    expiryTimestamp: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    durationSeconds: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    name: jspb.Message.getFieldWithDefault(msg, 9, ""),
    description: jspb.Message.getFieldWithDefault(msg, 10, ""),
    debug: jspb.Message.getFieldWithDefault(msg, 11, false),
    maxBoosts: jspb.Message.getFieldWithDefault(msg, 12, 0),
    maxSoulEggs: +jspb.Message.getFieldWithDefault(msg, 13, 0.0),
    minClientVersion: jspb.Message.getFieldWithDefault(msg, 14, 0),
    tokenIntervalMinutes: +jspb.Message.getFieldWithDefault(msg, 15, 0.0),
    rewardTiersList: jspb.Message.toObjectList(msg.getRewardTiersList(),
    proto.ContractProperties.RewardTier.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ContractProperties}
 */
proto.ContractProperties.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ContractProperties;
  return proto.ContractProperties.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ContractProperties} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ContractProperties}
 */
proto.ContractProperties.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.EggType} */ (reader.readEnum());
      msg.setEggType(value);
      break;
    case 3:
      var value = new proto.Reward;
      reader.readMessage(value,proto.Reward.deserializeBinaryFromReader);
      msg.addRewards(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCoopAllowed(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxCoopSize(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setExpiryTimestamp(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDurationSeconds(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDebug(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxBoosts(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxSoulEggs(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinClientVersion(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTokenIntervalMinutes(value);
      break;
    case 16:
      var value = new proto.ContractProperties.RewardTier;
      reader.readMessage(value,proto.ContractProperties.RewardTier.deserializeBinaryFromReader);
      msg.addRewardTiers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ContractProperties.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ContractProperties.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ContractProperties} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ContractProperties.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEggType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getRewardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.Reward.serializeBinaryToWriter
    );
  }
  f = message.getCoopAllowed();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getMaxCoopSize();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getExpiryTimestamp();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getDurationSeconds();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getDebug();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getMaxBoosts();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getMaxSoulEggs();
  if (f !== 0.0) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = message.getMinClientVersion();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getTokenIntervalMinutes();
  if (f !== 0.0) {
    writer.writeDouble(
      15,
      f
    );
  }
  f = message.getRewardTiersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      16,
      f,
      proto.ContractProperties.RewardTier.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ContractProperties.RewardTier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ContractProperties.RewardTier.repeatedFields_, null);
};
goog.inherits(proto.ContractProperties.RewardTier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ContractProperties.RewardTier.displayName = 'proto.ContractProperties.RewardTier';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ContractProperties.RewardTier.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ContractProperties.RewardTier.prototype.toObject = function(opt_includeInstance) {
  return proto.ContractProperties.RewardTier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ContractProperties.RewardTier} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ContractProperties.RewardTier.toObject = function(includeInstance, msg) {
  var f, obj = {
    rewardsList: jspb.Message.toObjectList(msg.getRewardsList(),
    proto.Reward.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ContractProperties.RewardTier}
 */
proto.ContractProperties.RewardTier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ContractProperties.RewardTier;
  return proto.ContractProperties.RewardTier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ContractProperties.RewardTier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ContractProperties.RewardTier}
 */
proto.ContractProperties.RewardTier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Reward;
      reader.readMessage(value,proto.Reward.deserializeBinaryFromReader);
      msg.addRewards(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ContractProperties.RewardTier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ContractProperties.RewardTier.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ContractProperties.RewardTier} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ContractProperties.RewardTier.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRewardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Reward.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Reward rewards = 1;
 * @return {!Array<!proto.Reward>}
 */
proto.ContractProperties.RewardTier.prototype.getRewardsList = function() {
  return /** @type{!Array<!proto.Reward>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Reward, 1));
};


/** @param {!Array<!proto.Reward>} value */
proto.ContractProperties.RewardTier.prototype.setRewardsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Reward=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Reward}
 */
proto.ContractProperties.RewardTier.prototype.addRewards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Reward, opt_index);
};


proto.ContractProperties.RewardTier.prototype.clearRewardsList = function() {
  this.setRewardsList([]);
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ContractProperties.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ContractProperties.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional EggType egg_type = 2;
 * @return {!proto.EggType}
 */
proto.ContractProperties.prototype.getEggType = function() {
  return /** @type {!proto.EggType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.EggType} value */
proto.ContractProperties.prototype.setEggType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated Reward rewards = 3;
 * @return {!Array<!proto.Reward>}
 */
proto.ContractProperties.prototype.getRewardsList = function() {
  return /** @type{!Array<!proto.Reward>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Reward, 3));
};


/** @param {!Array<!proto.Reward>} value */
proto.ContractProperties.prototype.setRewardsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Reward=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Reward}
 */
proto.ContractProperties.prototype.addRewards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Reward, opt_index);
};


proto.ContractProperties.prototype.clearRewardsList = function() {
  this.setRewardsList([]);
};


/**
 * optional bool coop_allowed = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ContractProperties.prototype.getCoopAllowed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.ContractProperties.prototype.setCoopAllowed = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional int32 max_coop_size = 5;
 * @return {number}
 */
proto.ContractProperties.prototype.getMaxCoopSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.ContractProperties.prototype.setMaxCoopSize = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional double expiry_timestamp = 6;
 * @return {number}
 */
proto.ContractProperties.prototype.getExpiryTimestamp = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.ContractProperties.prototype.setExpiryTimestamp = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double duration_seconds = 7;
 * @return {number}
 */
proto.ContractProperties.prototype.getDurationSeconds = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.ContractProperties.prototype.setDurationSeconds = function(value) {
  jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional string name = 9;
 * @return {string}
 */
proto.ContractProperties.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.ContractProperties.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string description = 10;
 * @return {string}
 */
proto.ContractProperties.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.ContractProperties.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional bool debug = 11;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ContractProperties.prototype.getDebug = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 11, false));
};


/** @param {boolean} value */
proto.ContractProperties.prototype.setDebug = function(value) {
  jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional int32 max_boosts = 12;
 * @return {number}
 */
proto.ContractProperties.prototype.getMaxBoosts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.ContractProperties.prototype.setMaxBoosts = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional double max_soul_eggs = 13;
 * @return {number}
 */
proto.ContractProperties.prototype.getMaxSoulEggs = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 13, 0.0));
};


/** @param {number} value */
proto.ContractProperties.prototype.setMaxSoulEggs = function(value) {
  jspb.Message.setProto3FloatField(this, 13, value);
};


/**
 * optional int32 min_client_version = 14;
 * @return {number}
 */
proto.ContractProperties.prototype.getMinClientVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.ContractProperties.prototype.setMinClientVersion = function(value) {
  jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional double token_interval_minutes = 15;
 * @return {number}
 */
proto.ContractProperties.prototype.getTokenIntervalMinutes = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 15, 0.0));
};


/** @param {number} value */
proto.ContractProperties.prototype.setTokenIntervalMinutes = function(value) {
  jspb.Message.setProto3FloatField(this, 15, value);
};


/**
 * repeated RewardTier reward_tiers = 16;
 * @return {!Array<!proto.ContractProperties.RewardTier>}
 */
proto.ContractProperties.prototype.getRewardTiersList = function() {
  return /** @type{!Array<!proto.ContractProperties.RewardTier>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ContractProperties.RewardTier, 16));
};


/** @param {!Array<!proto.ContractProperties.RewardTier>} value */
proto.ContractProperties.prototype.setRewardTiersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 16, value);
};


/**
 * @param {!proto.ContractProperties.RewardTier=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ContractProperties.RewardTier}
 */
proto.ContractProperties.prototype.addRewardTiers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 16, opt_value, proto.ContractProperties.RewardTier, opt_index);
};


proto.ContractProperties.prototype.clearRewardTiersList = function() {
  this.setRewardTiersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Reward = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Reward, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Reward.displayName = 'proto.Reward';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Reward.prototype.toObject = function(opt_includeInstance) {
  return proto.Reward.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Reward} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Reward.toObject = function(includeInstance, msg) {
  var f, obj = {
    1: jspb.Message.getFieldWithDefault(msg, 1, 0),
    goal: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    count: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    6: +jspb.Message.getFieldWithDefault(msg, 6, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Reward}
 */
proto.Reward.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Reward;
  return proto.Reward.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Reward} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Reward}
 */
proto.Reward.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.set1(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setGoal(value);
      break;
    case 3:
      var value = /** @type {!proto.RewardType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCount(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.set6(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Reward.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Reward.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Reward} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Reward.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.get1();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getGoal();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCount();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.get6();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
};


/**
 * optional int32 _1 = 1;
 * @return {number}
 */
proto.Reward.prototype.get1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Reward.prototype.set1 = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional double goal = 2;
 * @return {number}
 */
proto.Reward.prototype.getGoal = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.Reward.prototype.setGoal = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional RewardType type = 3;
 * @return {!proto.RewardType}
 */
proto.Reward.prototype.getType = function() {
  return /** @type {!proto.RewardType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.RewardType} value */
proto.Reward.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.Reward.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Reward.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional double count = 5;
 * @return {number}
 */
proto.Reward.prototype.getCount = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.Reward.prototype.setCount = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double _6 = 6;
 * @return {number}
 */
proto.Reward.prototype.get6 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.Reward.prototype.set6 = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CoopStatusRequestPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CoopStatusRequestPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CoopStatusRequestPayload.displayName = 'proto.CoopStatusRequestPayload';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CoopStatusRequestPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.CoopStatusRequestPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CoopStatusRequestPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CoopStatusRequestPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    code: jspb.Message.getFieldWithDefault(msg, 2, ""),
    playerId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CoopStatusRequestPayload}
 */
proto.CoopStatusRequestPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CoopStatusRequestPayload;
  return proto.CoopStatusRequestPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CoopStatusRequestPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CoopStatusRequestPayload}
 */
proto.CoopStatusRequestPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CoopStatusRequestPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CoopStatusRequestPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CoopStatusRequestPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CoopStatusRequestPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPlayerId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string contract_id = 1;
 * @return {string}
 */
proto.CoopStatusRequestPayload.prototype.getContractId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.CoopStatusRequestPayload.prototype.setContractId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string code = 2;
 * @return {string}
 */
proto.CoopStatusRequestPayload.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.CoopStatusRequestPayload.prototype.setCode = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string player_id = 3;
 * @return {string}
 */
proto.CoopStatusRequestPayload.prototype.getPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.CoopStatusRequestPayload.prototype.setPlayerId = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CoopStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.CoopStatus.repeatedFields_, null);
};
goog.inherits(proto.CoopStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CoopStatus.displayName = 'proto.CoopStatus';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.CoopStatus.repeatedFields_ = [4,11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CoopStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.CoopStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CoopStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CoopStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    eggsLaid: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    code: jspb.Message.getFieldWithDefault(msg, 3, ""),
    membersList: jspb.Message.toObjectList(msg.getMembersList(),
    proto.CoopStatus.Member.toObject, includeInstance),
    secondsUntilProductionDeadline: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    6: jspb.Message.getFieldWithDefault(msg, 6, 0),
    secondsUntilCollectionDeadline: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    8: jspb.Message.getFieldWithDefault(msg, 8, 0),
    creatorId: jspb.Message.getFieldWithDefault(msg, 9, ""),
    10: jspb.Message.getFieldWithDefault(msg, 10, 0),
    tokenGiftsList: jspb.Message.toObjectList(msg.getTokenGiftsList(),
    proto.CoopStatus.TokenGift.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CoopStatus}
 */
proto.CoopStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CoopStatus;
  return proto.CoopStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CoopStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CoopStatus}
 */
proto.CoopStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEggsLaid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 4:
      var value = new proto.CoopStatus.Member;
      reader.readMessage(value,proto.CoopStatus.Member.deserializeBinaryFromReader);
      msg.addMembers(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSecondsUntilProductionDeadline(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.set6(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSecondsUntilCollectionDeadline(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.set8(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatorId(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.set10(value);
      break;
    case 11:
      var value = new proto.CoopStatus.TokenGift;
      reader.readMessage(value,proto.CoopStatus.TokenGift.deserializeBinaryFromReader);
      msg.addTokenGifts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CoopStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CoopStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CoopStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CoopStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEggsLaid();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMembersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.CoopStatus.Member.serializeBinaryToWriter
    );
  }
  f = message.getSecondsUntilProductionDeadline();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.get6();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getSecondsUntilCollectionDeadline();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.get8();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getCreatorId();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.get10();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getTokenGiftsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.CoopStatus.TokenGift.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CoopStatus.Member = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CoopStatus.Member, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CoopStatus.Member.displayName = 'proto.CoopStatus.Member';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CoopStatus.Member.prototype.toObject = function(opt_includeInstance) {
  return proto.CoopStatus.Member.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CoopStatus.Member} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CoopStatus.Member.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    eggsLaid: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    active: jspb.Message.getFieldWithDefault(msg, 4, false),
    5: jspb.Message.getFieldWithDefault(msg, 5, 0),
    eggsPerSecond: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    7: jspb.Message.getFieldWithDefault(msg, 7, 0),
    earningBonusOom: +jspb.Message.getFieldWithDefault(msg, 11, 0.0),
    tokens: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CoopStatus.Member}
 */
proto.CoopStatus.Member.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CoopStatus.Member;
  return proto.CoopStatus.Member.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CoopStatus.Member} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CoopStatus.Member}
 */
proto.CoopStatus.Member.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEggsLaid(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.set5(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEggsPerSecond(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.set7(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEarningBonusOom(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTokens(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CoopStatus.Member.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CoopStatus.Member.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CoopStatus.Member} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CoopStatus.Member.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEggsLaid();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getActive();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.get5();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getEggsPerSecond();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.get7();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getEarningBonusOom();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getTokens();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.CoopStatus.Member.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.CoopStatus.Member.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.CoopStatus.Member.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.CoopStatus.Member.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional double eggs_laid = 3;
 * @return {number}
 */
proto.CoopStatus.Member.prototype.getEggsLaid = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.CoopStatus.Member.prototype.setEggsLaid = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional bool active = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.CoopStatus.Member.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.CoopStatus.Member.prototype.setActive = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional int32 _5 = 5;
 * @return {number}
 */
proto.CoopStatus.Member.prototype.get5 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.CoopStatus.Member.prototype.set5 = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional double eggs_per_second = 6;
 * @return {number}
 */
proto.CoopStatus.Member.prototype.getEggsPerSecond = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.CoopStatus.Member.prototype.setEggsPerSecond = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional int32 _7 = 7;
 * @return {number}
 */
proto.CoopStatus.Member.prototype.get7 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.CoopStatus.Member.prototype.set7 = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional double earning_bonus_oom = 11;
 * @return {number}
 */
proto.CoopStatus.Member.prototype.getEarningBonusOom = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 11, 0.0));
};


/** @param {number} value */
proto.CoopStatus.Member.prototype.setEarningBonusOom = function(value) {
  jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional int32 tokens = 12;
 * @return {number}
 */
proto.CoopStatus.Member.prototype.getTokens = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.CoopStatus.Member.prototype.setTokens = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CoopStatus.TokenGift = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CoopStatus.TokenGift, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CoopStatus.TokenGift.displayName = 'proto.CoopStatus.TokenGift';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CoopStatus.TokenGift.prototype.toObject = function(opt_includeInstance) {
  return proto.CoopStatus.TokenGift.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CoopStatus.TokenGift} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CoopStatus.TokenGift.toObject = function(includeInstance, msg) {
  var f, obj = {
    gifterId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tokens: jspb.Message.getFieldWithDefault(msg, 2, 0),
    gifterName: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CoopStatus.TokenGift}
 */
proto.CoopStatus.TokenGift.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CoopStatus.TokenGift;
  return proto.CoopStatus.TokenGift.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CoopStatus.TokenGift} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CoopStatus.TokenGift}
 */
proto.CoopStatus.TokenGift.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGifterId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTokens(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGifterName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CoopStatus.TokenGift.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CoopStatus.TokenGift.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CoopStatus.TokenGift} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CoopStatus.TokenGift.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGifterId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTokens();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getGifterName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string gifter_id = 1;
 * @return {string}
 */
proto.CoopStatus.TokenGift.prototype.getGifterId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.CoopStatus.TokenGift.prototype.setGifterId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 tokens = 2;
 * @return {number}
 */
proto.CoopStatus.TokenGift.prototype.getTokens = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.CoopStatus.TokenGift.prototype.setTokens = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string gifter_name = 3;
 * @return {string}
 */
proto.CoopStatus.TokenGift.prototype.getGifterName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.CoopStatus.TokenGift.prototype.setGifterName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string contract_id = 1;
 * @return {string}
 */
proto.CoopStatus.prototype.getContractId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.CoopStatus.prototype.setContractId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional double eggs_laid = 2;
 * @return {number}
 */
proto.CoopStatus.prototype.getEggsLaid = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.CoopStatus.prototype.setEggsLaid = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional string code = 3;
 * @return {string}
 */
proto.CoopStatus.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.CoopStatus.prototype.setCode = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated Member members = 4;
 * @return {!Array<!proto.CoopStatus.Member>}
 */
proto.CoopStatus.prototype.getMembersList = function() {
  return /** @type{!Array<!proto.CoopStatus.Member>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.CoopStatus.Member, 4));
};


/** @param {!Array<!proto.CoopStatus.Member>} value */
proto.CoopStatus.prototype.setMembersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.CoopStatus.Member=} opt_value
 * @param {number=} opt_index
 * @return {!proto.CoopStatus.Member}
 */
proto.CoopStatus.prototype.addMembers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.CoopStatus.Member, opt_index);
};


proto.CoopStatus.prototype.clearMembersList = function() {
  this.setMembersList([]);
};


/**
 * optional double seconds_until_production_deadline = 5;
 * @return {number}
 */
proto.CoopStatus.prototype.getSecondsUntilProductionDeadline = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.CoopStatus.prototype.setSecondsUntilProductionDeadline = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional int32 _6 = 6;
 * @return {number}
 */
proto.CoopStatus.prototype.get6 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.CoopStatus.prototype.set6 = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional double seconds_until_collection_deadline = 7;
 * @return {number}
 */
proto.CoopStatus.prototype.getSecondsUntilCollectionDeadline = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.CoopStatus.prototype.setSecondsUntilCollectionDeadline = function(value) {
  jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional int32 _8 = 8;
 * @return {number}
 */
proto.CoopStatus.prototype.get8 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.CoopStatus.prototype.set8 = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string creator_id = 9;
 * @return {string}
 */
proto.CoopStatus.prototype.getCreatorId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.CoopStatus.prototype.setCreatorId = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional int32 _10 = 10;
 * @return {number}
 */
proto.CoopStatus.prototype.get10 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.CoopStatus.prototype.set10 = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * repeated TokenGift token_gifts = 11;
 * @return {!Array<!proto.CoopStatus.TokenGift>}
 */
proto.CoopStatus.prototype.getTokenGiftsList = function() {
  return /** @type{!Array<!proto.CoopStatus.TokenGift>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.CoopStatus.TokenGift, 11));
};


/** @param {!Array<!proto.CoopStatus.TokenGift>} value */
proto.CoopStatus.prototype.setTokenGiftsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.CoopStatus.TokenGift=} opt_value
 * @param {number=} opt_index
 * @return {!proto.CoopStatus.TokenGift}
 */
proto.CoopStatus.prototype.addTokenGifts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.CoopStatus.TokenGift, opt_index);
};


proto.CoopStatus.prototype.clearTokenGiftsList = function() {
  this.setTokenGiftsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetPeriodicalsRequestPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetPeriodicalsRequestPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GetPeriodicalsRequestPayload.displayName = 'proto.GetPeriodicalsRequestPayload';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetPeriodicalsRequestPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.GetPeriodicalsRequestPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetPeriodicalsRequestPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetPeriodicalsRequestPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    2: jspb.Message.getFieldWithDefault(msg, 2, 0),
    3: jspb.Message.getFieldWithDefault(msg, 3, 0),
    4: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    5: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    earningBonus: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    clientVersion: jspb.Message.getFieldWithDefault(msg, 10, 0),
    11: jspb.Message.getFieldWithDefault(msg, 11, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetPeriodicalsRequestPayload}
 */
proto.GetPeriodicalsRequestPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetPeriodicalsRequestPayload;
  return proto.GetPeriodicalsRequestPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetPeriodicalsRequestPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetPeriodicalsRequestPayload}
 */
proto.GetPeriodicalsRequestPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.set2(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.set3(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.set4(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.set5(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEarningBonus(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setClientVersion(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.set11(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetPeriodicalsRequestPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetPeriodicalsRequestPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetPeriodicalsRequestPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetPeriodicalsRequestPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.get2();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.get3();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.get4();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.get5();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getEarningBonus();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getClientVersion();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.get11();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
};


/**
 * optional string player_id = 1;
 * @return {string}
 */
proto.GetPeriodicalsRequestPayload.prototype.getPlayerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.GetPeriodicalsRequestPayload.prototype.setPlayerId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 _2 = 2;
 * @return {number}
 */
proto.GetPeriodicalsRequestPayload.prototype.get2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GetPeriodicalsRequestPayload.prototype.set2 = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 _3 = 3;
 * @return {number}
 */
proto.GetPeriodicalsRequestPayload.prototype.get3 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.GetPeriodicalsRequestPayload.prototype.set3 = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional double _4 = 4;
 * @return {number}
 */
proto.GetPeriodicalsRequestPayload.prototype.get4 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.GetPeriodicalsRequestPayload.prototype.set4 = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double _5 = 5;
 * @return {number}
 */
proto.GetPeriodicalsRequestPayload.prototype.get5 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.GetPeriodicalsRequestPayload.prototype.set5 = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double earning_bonus = 8;
 * @return {number}
 */
proto.GetPeriodicalsRequestPayload.prototype.getEarningBonus = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.GetPeriodicalsRequestPayload.prototype.setEarningBonus = function(value) {
  jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional int32 client_version = 10;
 * @return {number}
 */
proto.GetPeriodicalsRequestPayload.prototype.getClientVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.GetPeriodicalsRequestPayload.prototype.setClientVersion = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 _11 = 11;
 * @return {number}
 */
proto.GetPeriodicalsRequestPayload.prototype.get11 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.GetPeriodicalsRequestPayload.prototype.set11 = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Periodicals = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Periodicals, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Periodicals.displayName = 'proto.Periodicals';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Periodicals.prototype.toObject = function(opt_includeInstance) {
  return proto.Periodicals.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Periodicals} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Periodicals.toObject = function(includeInstance, msg) {
  var f, obj = {
    sales: (f = msg.getSales()) && proto.Periodicals.Sales.toObject(includeInstance, f),
    events: (f = msg.getEvents()) && proto.Periodicals.Events.toObject(includeInstance, f),
    contracts: (f = msg.getContracts()) && proto.Periodicals.Contracts.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Periodicals}
 */
proto.Periodicals.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Periodicals;
  return proto.Periodicals.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Periodicals} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Periodicals}
 */
proto.Periodicals.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Periodicals.Sales;
      reader.readMessage(value,proto.Periodicals.Sales.deserializeBinaryFromReader);
      msg.setSales(value);
      break;
    case 2:
      var value = new proto.Periodicals.Events;
      reader.readMessage(value,proto.Periodicals.Events.deserializeBinaryFromReader);
      msg.setEvents(value);
      break;
    case 3:
      var value = new proto.Periodicals.Contracts;
      reader.readMessage(value,proto.Periodicals.Contracts.deserializeBinaryFromReader);
      msg.setContracts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Periodicals.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Periodicals.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Periodicals} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Periodicals.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSales();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Periodicals.Sales.serializeBinaryToWriter
    );
  }
  f = message.getEvents();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Periodicals.Events.serializeBinaryToWriter
    );
  }
  f = message.getContracts();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Periodicals.Contracts.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Periodicals.Sales = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Periodicals.Sales.repeatedFields_, null);
};
goog.inherits(proto.Periodicals.Sales, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Periodicals.Sales.displayName = 'proto.Periodicals.Sales';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Periodicals.Sales.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Periodicals.Sales.prototype.toObject = function(opt_includeInstance) {
  return proto.Periodicals.Sales.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Periodicals.Sales} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Periodicals.Sales.toObject = function(includeInstance, msg) {
  var f, obj = {
    salesList: jspb.Message.toObjectList(msg.getSalesList(),
    proto.Sale.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Periodicals.Sales}
 */
proto.Periodicals.Sales.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Periodicals.Sales;
  return proto.Periodicals.Sales.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Periodicals.Sales} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Periodicals.Sales}
 */
proto.Periodicals.Sales.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Sale;
      reader.readMessage(value,proto.Sale.deserializeBinaryFromReader);
      msg.addSales(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Periodicals.Sales.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Periodicals.Sales.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Periodicals.Sales} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Periodicals.Sales.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSalesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Sale.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Sale sales = 1;
 * @return {!Array<!proto.Sale>}
 */
proto.Periodicals.Sales.prototype.getSalesList = function() {
  return /** @type{!Array<!proto.Sale>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Sale, 1));
};


/** @param {!Array<!proto.Sale>} value */
proto.Periodicals.Sales.prototype.setSalesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Sale=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Sale}
 */
proto.Periodicals.Sales.prototype.addSales = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Sale, opt_index);
};


proto.Periodicals.Sales.prototype.clearSalesList = function() {
  this.setSalesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Periodicals.Events = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Periodicals.Events.repeatedFields_, null);
};
goog.inherits(proto.Periodicals.Events, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Periodicals.Events.displayName = 'proto.Periodicals.Events';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Periodicals.Events.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Periodicals.Events.prototype.toObject = function(opt_includeInstance) {
  return proto.Periodicals.Events.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Periodicals.Events} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Periodicals.Events.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventsList: jspb.Message.toObjectList(msg.getEventsList(),
    proto.Event.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Periodicals.Events}
 */
proto.Periodicals.Events.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Periodicals.Events;
  return proto.Periodicals.Events.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Periodicals.Events} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Periodicals.Events}
 */
proto.Periodicals.Events.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Event;
      reader.readMessage(value,proto.Event.deserializeBinaryFromReader);
      msg.addEvents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Periodicals.Events.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Periodicals.Events.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Periodicals.Events} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Periodicals.Events.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Event.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Event events = 1;
 * @return {!Array<!proto.Event>}
 */
proto.Periodicals.Events.prototype.getEventsList = function() {
  return /** @type{!Array<!proto.Event>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Event, 1));
};


/** @param {!Array<!proto.Event>} value */
proto.Periodicals.Events.prototype.setEventsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Event=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Event}
 */
proto.Periodicals.Events.prototype.addEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Event, opt_index);
};


proto.Periodicals.Events.prototype.clearEventsList = function() {
  this.setEventsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Periodicals.Contracts = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Periodicals.Contracts.repeatedFields_, null);
};
goog.inherits(proto.Periodicals.Contracts, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Periodicals.Contracts.displayName = 'proto.Periodicals.Contracts';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Periodicals.Contracts.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Periodicals.Contracts.prototype.toObject = function(opt_includeInstance) {
  return proto.Periodicals.Contracts.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Periodicals.Contracts} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Periodicals.Contracts.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractsList: jspb.Message.toObjectList(msg.getContractsList(),
    proto.ContractProperties.toObject, includeInstance),
    responseTimestamp: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Periodicals.Contracts}
 */
proto.Periodicals.Contracts.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Periodicals.Contracts;
  return proto.Periodicals.Contracts.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Periodicals.Contracts} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Periodicals.Contracts}
 */
proto.Periodicals.Contracts.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ContractProperties;
      reader.readMessage(value,proto.ContractProperties.deserializeBinaryFromReader);
      msg.addContracts(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setResponseTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Periodicals.Contracts.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Periodicals.Contracts.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Periodicals.Contracts} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Periodicals.Contracts.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ContractProperties.serializeBinaryToWriter
    );
  }
  f = message.getResponseTimestamp();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * repeated ContractProperties contracts = 1;
 * @return {!Array<!proto.ContractProperties>}
 */
proto.Periodicals.Contracts.prototype.getContractsList = function() {
  return /** @type{!Array<!proto.ContractProperties>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ContractProperties, 1));
};


/** @param {!Array<!proto.ContractProperties>} value */
proto.Periodicals.Contracts.prototype.setContractsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ContractProperties=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ContractProperties}
 */
proto.Periodicals.Contracts.prototype.addContracts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ContractProperties, opt_index);
};


proto.Periodicals.Contracts.prototype.clearContractsList = function() {
  this.setContractsList([]);
};


/**
 * optional double response_timestamp = 2;
 * @return {number}
 */
proto.Periodicals.Contracts.prototype.getResponseTimestamp = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.Periodicals.Contracts.prototype.setResponseTimestamp = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional Sales sales = 1;
 * @return {?proto.Periodicals.Sales}
 */
proto.Periodicals.prototype.getSales = function() {
  return /** @type{?proto.Periodicals.Sales} */ (
    jspb.Message.getWrapperField(this, proto.Periodicals.Sales, 1));
};


/** @param {?proto.Periodicals.Sales|undefined} value */
proto.Periodicals.prototype.setSales = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.Periodicals.prototype.clearSales = function() {
  this.setSales(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Periodicals.prototype.hasSales = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Events events = 2;
 * @return {?proto.Periodicals.Events}
 */
proto.Periodicals.prototype.getEvents = function() {
  return /** @type{?proto.Periodicals.Events} */ (
    jspb.Message.getWrapperField(this, proto.Periodicals.Events, 2));
};


/** @param {?proto.Periodicals.Events|undefined} value */
proto.Periodicals.prototype.setEvents = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.Periodicals.prototype.clearEvents = function() {
  this.setEvents(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Periodicals.prototype.hasEvents = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Contracts contracts = 3;
 * @return {?proto.Periodicals.Contracts}
 */
proto.Periodicals.prototype.getContracts = function() {
  return /** @type{?proto.Periodicals.Contracts} */ (
    jspb.Message.getWrapperField(this, proto.Periodicals.Contracts, 3));
};


/** @param {?proto.Periodicals.Contracts|undefined} value */
proto.Periodicals.prototype.setContracts = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.Periodicals.prototype.clearContracts = function() {
  this.setContracts(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Periodicals.prototype.hasContracts = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Sale = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Sale, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Sale.displayName = 'proto.Sale';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Sale.prototype.toObject = function(opt_includeInstance) {
  return proto.Sale.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Sale} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Sale.toObject = function(includeInstance, msg) {
  var f, obj = {
    saleType: jspb.Message.getFieldWithDefault(msg, 1, ""),
    secondsRemaining: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    saleAmount: jspb.Message.getFieldWithDefault(msg, 3, ""),
    id: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Sale}
 */
proto.Sale.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Sale;
  return proto.Sale.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Sale} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Sale}
 */
proto.Sale.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSaleType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSecondsRemaining(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSaleAmount(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Sale.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Sale.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Sale} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Sale.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSaleType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSecondsRemaining();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getSaleAmount();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string sale_type = 1;
 * @return {string}
 */
proto.Sale.prototype.getSaleType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Sale.prototype.setSaleType = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional double seconds_remaining = 2;
 * @return {number}
 */
proto.Sale.prototype.getSecondsRemaining = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.Sale.prototype.setSecondsRemaining = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional string sale_amount = 3;
 * @return {string}
 */
proto.Sale.prototype.getSaleAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Sale.prototype.setSaleAmount = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string id = 4;
 * @return {string}
 */
proto.Sale.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Sale.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Event.displayName = 'proto.Event';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    secondsRemaining: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    eventType: jspb.Message.getFieldWithDefault(msg, 3, ""),
    multiplier: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    message: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Event}
 */
proto.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Event;
  return proto.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Event}
 */
proto.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSecondsRemaining(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMultiplier(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSecondsRemaining();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getEventType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMultiplier();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.Event.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Event.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional double seconds_remaining = 2;
 * @return {number}
 */
proto.Event.prototype.getSecondsRemaining = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.Event.prototype.setSecondsRemaining = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional string event_type = 3;
 * @return {string}
 */
proto.Event.prototype.getEventType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Event.prototype.setEventType = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional double multiplier = 4;
 * @return {number}
 */
proto.Event.prototype.getMultiplier = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.Event.prototype.setMultiplier = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional string message = 5;
 * @return {string}
 */
proto.Event.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.Event.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * @enum {number}
 */
proto.EggType = {
  INVALID_EGG: 0,
  EDIBLE: 1,
  SUPERFOOD: 2,
  MEDICAL: 3,
  ROCKET_FUEL: 4,
  SUPER_MATERIAL: 5,
  FUSION: 6,
  QUANTUM: 7,
  IMMORTALITY: 8,
  TACHYON: 9,
  GRAVITON: 10,
  DILITHIUM: 11,
  PRODIGY: 12,
  TERRAFORM: 13,
  ANTIMATTER: 14,
  DARK_MATTER: 15,
  AI: 16,
  NEBULA: 17,
  UNIVERSE: 18,
  ENLIGHTENMENT: 19,
  CHOCOLATE: 100,
  EASTER: 101,
  WATERBALLOON: 102,
  FIREWORK: 103,
  PUMPKIN: 104,
  UNKNOWN: 1000
};

/**
 * @enum {number}
 */
proto.TrophyType = {
  NO_TROPHY: 0,
  BRONZE: 1,
  SILVER: 2,
  GOLD: 3,
  PLATINUM: 4,
  DIAMOND: 5
};

/**
 * @enum {number}
 */
proto.RewardType = {
  INVALID_REWARD: 0,
  GOLDEN_EGG: 2,
  SOUL_EGG: 3,
  PROPHECY_EGG: 4,
  EPIC_RESEARCH: 5,
  PIGGY_GOLDEN_EGG: 6,
  PIGGY_MULTIPLY: 7,
  PIGGY_LEVEL_UP: 8,
  BOOST: 9
};

goog.object.extend(exports, proto);
